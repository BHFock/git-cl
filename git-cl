#!/usr/bin/env python3
"""
git-cl: Manage changelists within a Git working directory.

Inspired by Subversion's changelist concept, this tool allows developers to
group files by intent before staging or committing, enabling cleaner workflows.
"""

import argparse
import json
import sys
import subprocess
from pathlib import Path

def cl_get_file():
    try:
        git_dir = subprocess.check_output(
            ["git", "rev-parse", "--git-dir"],
            stderr=subprocess.DEVNULL,
            text=True
        ).strip()
        return Path(git_dir) / "cl.json"
    except subprocess.CalledProcessError:
        print("Error: Not inside a Git repository.")
        sys.exit(1)

def cl_load():
    cl_file = cl_get_file()
    if cl_file.exists():
        with open(cl_file, "r") as f:
            return json.load(f)
    return {}

def cl_save(data):
    cl_file = cl_get_file()
    cleaned = {k: v for k, v in data.items() if v}
    with open(cl_file, "w") as f:
        json.dump(cleaned, f, indent=2)

def cl_validate_files(files):
    valid = []
    for file in files:
        if Path(file).exists():
            valid.append(file)
        else:
            print(f"Warning: '{file}' does not exist or is not tracked by Git.")
    return valid

def cl_add(args):
    """
    Add files to a named changelist.
    """
    changelists = cl_load()
    files = cl_validate_files(args.files)
    if args.name not in changelists:
        changelists[args.name] = []
    for file in files:
        for cl in changelists.values():
            if file in cl:
                cl.remove(file)
        if file not in changelists[args.name]:
            changelists[args.name].append(file)
    cl_save(changelists)
    print(f"Added to '{args.name}': {files}")

def cl_stage(args):
    """
    Stage all files in a changelist and delete it.
    """
    # TODO: Load changelist, git-add all files, then delete the changelist
    print(f"Staging files from changelist '{args.name}' and deleting it")

def cl_list(args):
    """
    Display all changelists and the files they contain.
    """
    # TODO: Load changelist data and print formatted table
    print("Listing all changelists")

def cl_status(args):
    """
    Show modified files grouped by their changelists.
    Helps distinguish staged vs. uncommitted changes.
    """
    # TODO: Compare working directory with changelists
    print("Showing modified files grouped by changelist")

def cl_remove(args):
    """
    Remove each specified file from its changelist.
    """
    for file in args.files:
        # TODO: Find changelist containing the file and remove it
        print(f"Removing '{file}' from its changelist")

def cl_delete(args):
    """
    Delete a changelist by name, even if it contains files.
    """
    # TODO: Remove changelist from storage
    print(f"Deleting changelist '{args.name}'")

def cl_commit(args):
    """
    Stage all files in a changelist and commit them with the given message.
    The changelist is deleted afterwards.
    """
    # TODO: Validate files, stage them, commit via subprocess, then delete changelist
    print(f"Committing changelist '{args.name}' with message: {args.message}")

def main():
    """
    Entry point for the git-cl tool.
    Parses CLI arguments and dispatches subcommand functions.
    """
    parser = argparse.ArgumentParser(
        prog='git-cl',
        description='Organise files into changelists before staging or committing'
    )

    subparsers = parser.add_subparsers(dest='command', required=True)

    # Add command
    add_parser = subparsers.add_parser('add', help='Add files to a changelist')
    add_parser.add_argument('name', help='Name of the changelist')
    add_parser.add_argument('files', nargs='+', help='Files to add')
    add_parser.set_defaults(func=cl_add)

    # Stage command
    stage_parser = subparsers.add_parser('stage', help='Stage all files in a changelist and delete it')
    stage_parser.add_argument('name', help='Name of the changelist')
    stage_parser.set_defaults(func=cl_stage)

    # List / ls
    list_parser = subparsers.add_parser('list', help='Show all changelists')
    list_parser.set_defaults(func=cl_list)
    subparsers.add_parser('ls', help='Alias for list').set_defaults(func=cl_list)

    # Status / st
    status_parser = subparsers.add_parser('status', help='Show changes grouped by changelist')
    status_parser.set_defaults(func=cl_status)
    subparsers.add_parser('st', help='Alias for status').set_defaults(func=cl_status)

    # Remove
    remove_parser = subparsers.add_parser('remove', help='Remove files from their changelists')
    remove_parser.add_argument('files', nargs='+', help='Files to remove')
    remove_parser.set_defaults(func=cl_remove)

    # Delete
    delete_parser = subparsers.add_parser('delete', help='Delete a changelist by name')
    delete_parser.add_argument('name', help='Name of the changelist')
    delete_parser.set_defaults(func=cl_delete)

    # Commit
    commit_parser = subparsers.add_parser('commit', help='Commit all files in a changelist')
    commit_parser.add_argument('name', help='Name of the changelist')
    commit_parser.add_argument('-m', '--message', required=True, help='Commit message')
    commit_parser.set_defaults(func=cl_commit)

    args = parser.parse_args()
    args.func(args)

if __name__ == '__main__':
    main()

