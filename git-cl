#!/usr/bin/env python3
"""
git-cl: Manage changelists within a Git working directory.

Inspired by Subversion's changelist concept, this tool allows developers to
group files by intent before staging or committing, enabling cleaner workflows.
"""

import argparse
import json
import sys
import subprocess
from pathlib import Path

def cl_get_file():
    try:
        git_dir = subprocess.check_output(
            ["git", "rev-parse", "--git-dir"],
            stderr=subprocess.DEVNULL,
            text=True
        ).strip()
        return Path(git_dir) / "cl.json"
    except subprocess.CalledProcessError:
        print("Error: Not inside a Git repository.")
        sys.exit(1)

def cl_load():
    cl_file = cl_get_file()
    if cl_file.exists():
        with open(cl_file, "r") as f:
            return json.load(f)
    return {}

def cl_save(data):
    cl_file = cl_get_file()
    cleaned = {k: v for k, v in data.items() if v}
    with open(cl_file, "w") as f:
        json.dump(cleaned, f, indent=2)

def cl_validate_files(files):
    valid = []
    for file in files:
        if Path(file).exists():
            valid.append(file)
        else:
            print(f"Warning: '{file}' does not exist or is not tracked by Git.")
    return valid

def cl_add(args):
    """
    Add files to a named changelist.
    """
    changelists = cl_load()
    files = cl_validate_files(args.files)
    if args.name not in changelists:
        changelists[args.name] = []
    for file in files:
        for cl in changelists.values():
            if file in cl:
                cl.remove(file)
        if file not in changelists[args.name]:
            changelists[args.name].append(file)
    cl_save(changelists)
    print(f"Added to '{args.name}': {files}")

def cl_stage(args):
    """
    Stage all files in a changelist and delete it.
    """
    # TODO: Load changelist, git-add all files, then delete the changelist
    print(f"Staging files from changelist '{args.name}' and deleting it")

def cl_list(args):
    """
    Display all changelists and the files they contain.
    """
    changelists = cl_load()
    if not changelists:
        print("No changelists found.")
        return
    for name, files in changelists.items():
        print(f"{name}:")
        for file in files:
            print(f"  {file}")

def cl_status(args):
    """
    Show files grouped by changelist.
    Displays status as:
      [M]   modified
      [D]   deleted
      [??]  untracked
      [ ]   unchanged
    """
    changelists = cl_load()

    # Get the Git root directory
    try:
        git_root = Path(
            subprocess.check_output(["git", "rev-parse", "--show-toplevel"], text=True).strip()
        ).resolve()
    except subprocess.CalledProcessError:
        print("Error: Not inside a Git repository.")
        sys.exit(1)

    # Get detailed status info
    try:
        output = subprocess.check_output(
            ["git", "status", "--porcelain", "--untracked-files=all"], text=True
        ).splitlines()
    except subprocess.CalledProcessError:
        print("Error: Failed to run git status.")
        sys.exit(1)

    # Build status map: {file_path: status}
    status_map = {}
    for line in output:
        code = line[:2]
        raw_path = line[3:].strip()
        abs_path = (git_root / raw_path).resolve()
        rel_path = abs_path.relative_to(git_root).as_posix()

        if code == "??":
            status_map[rel_path] = "??"
        elif "D" in code:
            status_map[rel_path] = "D"
        elif "M" in code:
            status_map[rel_path] = "M"
        else:
            status_map[rel_path] = " "

    # Flatten changelist files to set for quick lookup
    assigned_files = set()
    for files in changelists.values():
        assigned_files.update(files)

    # Print changelists and their files
    for cl_name, files in changelists.items():
        print(f"{cl_name}:")
        for file in files:
            abs_file = (Path.cwd() / file).resolve()
            try:
                rel_file = abs_file.relative_to(git_root).as_posix()
            except ValueError:
                rel_file = file

            status = status_map.get(rel_file, " ")
            tag = f"[{status}]" if status != " " else "[ ]"
            print(f"  {tag} {file}")

    # Find files in git status but NOT in any changelist
    no_cl_files = []
    for file in status_map.keys():
        if file not in assigned_files:
            no_cl_files.append(file)

    if no_cl_files:
        print("No Changelist:")
        for file in sorted(no_cl_files):
            status = status_map.get(file, " ")
            tag = f"[{status}]" if status != " " else "[ ]"
            print(f"  {tag} {file}")

    
def cl_remove(args):
    """
    Remove each specified file from its changelist.
    """
    changelists = cl_load()
    removed = []

    for file in args.files:
        for name, files in changelists.items():
            if file in files:
                files.remove(file)
                removed.append(file)
                print(f"Removed '{file}' from changelist '{name}'")
                break
        else:
            print(f"'{file}' was not found in any changelist.")

    if removed:
        cl_save(changelists)

def cl_delete(args):
    """
    Delete a changelist by name, even if it contains files.
    """
    # TODO: Remove changelist from storage
    print(f"Deleting changelist '{args.name}'")

def cl_commit(args):
    """
    Stage all files in a changelist and commit them with the given message.
    The changelist is deleted afterwards.
    """
    # TODO: Validate files, stage them, commit via subprocess, then delete changelist
    print(f"Committing changelist '{args.name}' with message: {args.message}")

def main():
    """
    Entry point for the git-cl tool.
    Parses CLI arguments and dispatches subcommand functions.
    """
    parser = argparse.ArgumentParser(
        prog='git-cl',
        description='Organise files into changelists before staging or committing'
    )

    subparsers = parser.add_subparsers(dest='command', required=True)

    # Add command
    add_parser = subparsers.add_parser('add', help='Add files to a changelist')
    add_parser.add_argument('name', help='Name of the changelist')
    add_parser.add_argument('files', nargs='+', help='Files to add')
    add_parser.set_defaults(func=cl_add)

    # Stage command
    stage_parser = subparsers.add_parser('stage', help='Stage all files in a changelist and delete it')
    stage_parser.add_argument('name', help='Name of the changelist')
    stage_parser.set_defaults(func=cl_stage)

    # List / ls
    list_parser = subparsers.add_parser('list', help='Show all changelists')
    list_parser.set_defaults(func=cl_list)
    subparsers.add_parser('ls', help='Alias for list').set_defaults(func=cl_list)

    # Status / st
    status_parser = subparsers.add_parser('status', help='Show changes grouped by changelist')
    status_parser.set_defaults(func=cl_status)
    subparsers.add_parser('st', help='Alias for status').set_defaults(func=cl_status)

    # Remove
    remove_parser = subparsers.add_parser('remove', help='Remove files from their changelists')
    remove_parser.add_argument('files', nargs='+', help='Files to remove')
    remove_parser.set_defaults(func=cl_remove)

    # Delete
    delete_parser = subparsers.add_parser('delete', help='Delete a changelist by name')
    delete_parser.add_argument('name', help='Name of the changelist')
    delete_parser.set_defaults(func=cl_delete)

    # Commit
    commit_parser = subparsers.add_parser('commit', help='Commit all files in a changelist')
    commit_parser.add_argument('name', help='Name of the changelist')
    commit_parser.add_argument('-m', '--message', required=True, help='Commit message')
    commit_parser.set_defaults(func=cl_commit)

    args = parser.parse_args()
    args.func(args)

if __name__ == '__main__':
    main()

